// Mocks generated by Mockito 5.4.4 from annotations
// in proj_with_reso/test/features/number_trivia/presentation/bloc/number_trivia_test_bloc.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:dartz/dartz.dart' as _i3;
import 'package:flutter_bloc/flutter_bloc.dart' as _i13;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i12;
import 'package:proj_with_reso/core/error/failures.dart' as _i8;
import 'package:proj_with_reso/core/usecases/usecase.dart' as _i10;
import 'package:proj_with_reso/core/util/input_conversion.dart' as _i6;
import 'package:proj_with_reso/features/number_trivia/domain/entities/number_trivia.dart'
    as _i9;
import 'package:proj_with_reso/features/number_trivia/domain/repository/number_trivia_repo.dart'
    as _i2;
import 'package:proj_with_reso/features/number_trivia/domain/usecases/get_conrete_number_trivia.dart'
    as _i4;
import 'package:proj_with_reso/features/number_trivia/domain/usecases/get_random_number_trivia.dart'
    as _i5;
import 'package:proj_with_reso/features/number_trivia/presentation/bloc/bloc/number_trivia_bloc.dart'
    as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNumberTriviaRepo_0 extends _i1.SmartFake
    implements _i2.NumberTriviaRepo {
  _FakeNumberTriviaRepo_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetConcreteNumberTrivia_2 extends _i1.SmartFake
    implements _i4.GetConcreteNumberTrivia {
  _FakeGetConcreteNumberTrivia_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetRandomNumberTrivia_3 extends _i1.SmartFake
    implements _i5.GetRandomNumberTrivia {
  _FakeGetRandomNumberTrivia_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInputConverter_4 extends _i1.SmartFake
    implements _i6.InputConverter {
  _FakeInputConverter_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetConcreteNumberTrivia].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetConcreteNumberTrivia extends _i1.Mock
    implements _i4.GetConcreteNumberTrivia {
  MockGetConcreteNumberTrivia() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NumberTriviaRepo get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeNumberTriviaRepo_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.NumberTriviaRepo);

  @override
  _i7.Future<_i3.Either<_i8.Failure, _i9.NumberTrivia>> call(
          _i4.Params? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i7.Future<_i3.Either<_i8.Failure, _i9.NumberTrivia>>.value(
                _FakeEither_1<_i8.Failure, _i9.NumberTrivia>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i7.Future<_i3.Either<_i8.Failure, _i9.NumberTrivia>>);
}

/// A class which mocks [GetRandomNumberTrivia].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetRandomNumberTrivia extends _i1.Mock
    implements _i5.GetRandomNumberTrivia {
  MockGetRandomNumberTrivia() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NumberTriviaRepo get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeNumberTriviaRepo_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.NumberTriviaRepo);

  @override
  _i7.Future<_i3.Either<_i8.Failure, _i9.NumberTrivia>> call(
          _i10.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i7.Future<_i3.Either<_i8.Failure, _i9.NumberTrivia>>.value(
                _FakeEither_1<_i8.Failure, _i9.NumberTrivia>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i7.Future<_i3.Either<_i8.Failure, _i9.NumberTrivia>>);
}

/// A class which mocks [InputConverter].
///
/// See the documentation for Mockito's code generation for more information.
class MockInputConverter extends _i1.Mock implements _i6.InputConverter {
  MockInputConverter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Either<_i8.Failure, int> stringToInt(String? str) => (super.noSuchMethod(
        Invocation.method(
          #stringToInt,
          [str],
        ),
        returnValue: _FakeEither_1<_i8.Failure, int>(
          this,
          Invocation.method(
            #stringToInt,
            [str],
          ),
        ),
      ) as _i3.Either<_i8.Failure, int>);
}

/// A class which mocks [NumberTriviaBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockNumberTriviaBloc extends _i1.Mock implements _i11.NumberTriviaBloc {
  MockNumberTriviaBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.GetConcreteNumberTrivia get getConcreteNumberTrivia =>
      (super.noSuchMethod(
        Invocation.getter(#getConcreteNumberTrivia),
        returnValue: _FakeGetConcreteNumberTrivia_2(
          this,
          Invocation.getter(#getConcreteNumberTrivia),
        ),
      ) as _i4.GetConcreteNumberTrivia);

  @override
  _i5.GetRandomNumberTrivia get getRandomNumberTrivia => (super.noSuchMethod(
        Invocation.getter(#getRandomNumberTrivia),
        returnValue: _FakeGetRandomNumberTrivia_3(
          this,
          Invocation.getter(#getRandomNumberTrivia),
        ),
      ) as _i5.GetRandomNumberTrivia);

  @override
  _i6.InputConverter get inputConverter => (super.noSuchMethod(
        Invocation.getter(#inputConverter),
        returnValue: _FakeInputConverter_4(
          this,
          Invocation.getter(#inputConverter),
        ),
      ) as _i6.InputConverter);

  @override
  _i11.NumberTriviaState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i12.dummyValue<_i11.NumberTriviaState>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i11.NumberTriviaState);

  @override
  _i7.Stream<_i11.NumberTriviaState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i7.Stream<_i11.NumberTriviaState>.empty(),
      ) as _i7.Stream<_i11.NumberTriviaState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i11.NumberTriviaEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i11.NumberTriviaEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i11.NumberTriviaState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i11.NumberTriviaEvent>(
    _i13.EventHandler<E, _i11.NumberTriviaState>? handler, {
    _i13.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i13.Transition<_i11.NumberTriviaEvent, _i11.NumberTriviaState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  void onChange(_i13.Change<_i11.NumberTriviaState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
